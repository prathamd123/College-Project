import React, { useState, useEffect } from "react";
import * as d3 from "d3";

const BSTVisualizer = () => {
  const [tree, setTree] = useState(null);
  const [inputValue, setInputValue] = useState("");
  const [searchValue, setSearchValue] = useState("");
  const [searchResult, setSearchResult] = useState(null);
  const [traversalResult, setTraversalResult] = useState("");

  class TreeNode {
    constructor(value) {
      this.value = value;
      this.left = null;
      this.right = null;
    }
  }

  class BST {
    constructor() {
      this.root = null;
    }

    insert(value) {
      const newNode = new TreeNode(value);
      if (!this.root) {
        this.root = newNode;
        return;
      }
      let current = this.root;
      while (true) {
        if (value < current.value) {
          if (!current.left) {
            current.left = newNode;
            return;
          }
          current = current.left;
        } else {
          if (!current.right) {
            current.right = newNode;
            return;
          }
          current = current.right;
        }
      }
    }

    delete(value) {
      this.root = this._deleteNode(this.root, value);
    }

    _deleteNode(root, value) {
      if (!root) return root;

      if (value < root.value) {
        root.left = this._deleteNode(root.left, value);
      } else if (value > root.value) {
        root.right = this._deleteNode(root.right, value);
      } else {
        if (!root.left) return root.right;
        if (!root.right) return root.left;

        root.value = this._findMin(root.right);
        root.right = this._deleteNode(root.right, root.value);
      }
      return root;
    }

    search(value) {
      let current = this.root;
      while (current) {
        if (current.value === value) return current;
        current = value < current.value ? current.left : current.right;
      }
      return null;
    }

    findMin() {
      return this._findMin(this.root);
    }

    _findMin(node) {
      if (!node) return null;
      while (node.left) node = node.left;
      return node.value;
    }

    findMax() {
      let node = this.root;
      if (!node) return null;
      while (node.right) node = node.right;
      return node.value;
    }

    inorder() {
      const result = [];
      this._inorder(this.root, result);
      return result.join(", ");
    }

    _inorder(node, result) {
      if (!node) return;
      this._inorder(node.left, result);
      result.push(node.value);
      this._inorder(node.right, result);
    }

    preorder() {
      const result = [];
      this._preorder(this.root, result);
      return result.join(", ");
    }

    _preorder(node, result) {
      if (!node) return;
      result.push(node.value);
      this._preorder(node.left, result);
      this._preorder(node.right, result);
    }

    postorder() {
      const result = [];
      this._postorder(this.root, result);
      return result.join(", ");
    }

    _postorder(node, result) {
      if (!node) return;
      this._postorder(node.left, result);
      this._postorder(node.right, result);
      result.push(node.value);
    }
  }

  useEffect(() => {
    drawTree();
  }, [tree, searchResult]);

  const drawTree = () => {
    d3.select("#tree-container").selectAll("*").remove();
    if (!tree || !tree.root) return;

    const svgWidth = 1000;
    const svgHeight = 600;
    const svg = d3
      .select("#tree-container")
      .append("svg")
      .attr("width", svgWidth)
      .attr("height", svgHeight);

    const drawNode = (node, x, y, depth) => {
      if (!node) return;

      const horizontalGap = Math.max(50 / (depth + 1), 20);

      svg
        .append("circle")
        .attr("cx", x)
        .attr("cy", y)
        .attr("r", 20)
        .style("fill", searchResult === node.value ? "yellow" : "lightblue")
        .style("stroke", "black");

      svg
        .append("text")
        .attr("x", x)
        .attr("y", y + 5)
        .attr("text-anchor", "middle")
        .text(node.value)
        .style("font-size", "14px")
        .style("font-weight", "bold");

      if (node.left) {
        svg
          .append("line")
          .attr("x1", x)
          .attr("y1", y)
          .attr("x2", x - horizontalGap * 10)
          .attr("y2", y + 50)
          .style("stroke", "black");
        drawNode(node.left, x - horizontalGap * 10, y + 50, depth + 1);
      }

      if (node.right) {
        svg
          .append("line")
          .attr("x1", x)
          .attr("y1", y)
          .attr("x2", x + horizontalGap * 10)
          .attr("y2", y + 50)
          .style("stroke", "black");
        drawNode(node.right, x + horizontalGap * 10, y + 50, depth + 1);
      }
    };

    drawNode(tree.root, svgWidth / 2, 50, 1);
  };

  const handleInsert = () => {
    if (inputValue === "") return;
    const newTree = tree ? Object.assign(new BST(), tree) : new BST();
    newTree.insert(parseInt(inputValue));
    setTree(newTree);
    setInputValue("");
  };

  const handleDelete = () => {
    if (inputValue === "") return;
    const newTree = Object.assign(new BST(), tree);
    newTree.delete(parseInt(inputValue));
    setTree(newTree);
    setInputValue("");
  };

  const handleSearch = () => {
    if (searchValue === "") return;
    const foundNode = tree?.search(parseInt(searchValue));
    setSearchResult(foundNode ? foundNode.value : null);
  };

  return (
    <div style={{ textAlign: "center" }}>
      <h2>BST Visualization</h2>
      <input type="number" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder="Value" />
      <button onClick={handleInsert}>Insert</button>
      <button onClick={handleDelete}>Delete</button>
      <input type="number" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} placeholder="Search" />
      <button onClick={handleSearch}>Search</button>
      <button onClick={() => setTraversalResult(tree?.inorder() || "")}>Inorder</button>
      <button onClick={() => setTraversalResult(tree?.preorder() || "")}>Preorder</button>
      <button onClick={() => setTraversalResult(tree?.postorder() || "")}>Postorder</button>
      <div id="tree-container" style={{ border: "1px solid black", marginTop: "10px", width: "100%", height: "400px" }}></div>
      <p><strong>Traversal Result:</strong> {traversalResult}</p>
    </div>
  );
};

export default BSTVisualizer;


